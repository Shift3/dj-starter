version: 2.1

# All required ENV variables for deployment. STAGING_* variables are
# used on the `develop` branch. PRODUCTION_* variables are used on the
# `main` branch.
#
# name                                  example value
# --------------------------------------------------------------------
# PROJECT_NAME                          my-project
#
# STAGING_AWS_ACCESS_KEY_ID             AKIAIOSFODNN7EXAMPLE
# STAGING_AWS_SECRET_ACCESS_KEY         wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
# STAGING_AWS_DEFAULT_REGION            us-west-2
# STAGING_AWS_ECR_ACCOUNT_URL           012345678901.dkr.ecr.us-west-2.amazonaws.com
# STAGING_AWS_ECR_REPO_NAME             my-project
# STAGING_EB_ENVIRONMENT_NAME           my-project-api-webserver
# STAGING_EB_APPLICATION_NAME           my-project
#
# PRODUCTION_AWS_ACCESS_KEY_ID          AKIAIOSFODNN7EXAMPLE
# PRODUCTION_AWS_SECRET_ACCESS_KEY      wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
# PRODUCTION_AWS_DEFAULT_REGION         us-west-2
# PRODUCTION_AWS_ECR_ACCOUNT_URL        012345678901.dkr.ecr.us-west-2.amazonaws.com
# PRODUCTION_AWS_ECR_REPO_NAME          my-project
# PRODUCTION_EB_ENVIRONMENT_NAME        my-project-api-webserver
# PRODUCTION_EB_APPLICATION_NAME        my-project

# All optional ENV variables for deployment. If the *_AWS_ROLE_ARN are
# not provided, then AWS AssumeRole will not be used.
#
# name                                  example value
# --------------------------------------------------------------------
# STAGING_AWS_ROLE_ARN                  arn:aws:iam::008036621198:role/SuperDevAssumeRole
# PRODUCTION_AWS_ROLE_ARN               arn:aws:iam::008036621198:role/SuperDevAssumeRole
#
#
# Optionally add a NewRelic free license to enable application
# monitoring using the free excellent tooling from new relic.
# https://newrelic.com/
#
# name                                  example value
# --------------------------------------------------------------------
# NEW_RELIC_LICENSE_KEY                 a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1NRAL

orbs:
  aws-cli: circleci/aws-cli@2.0.6

commands:
  deploy:
    parameters:
      aws_ecr_account_url:
        type: string
      aws_ecr_repo_name:
        type: string
      aws_default_region:
        type: string
      aws_default_region_env:
        type: env_var_name
      aws_access_key_env:
        type: env_var_name
      aws_secret_key_env:
        type: env_var_name
      aws_role_arn_env:
        type: env_var_name
      eb_application_name:
        type: string
      eb_environment_name:
        type: string

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - aws-cli/setup:
          profile-name: default
          aws-region: <<parameters.aws_default_region_env>>
          aws-access-key-id: <<parameters.aws_access_key_env>>
          aws-secret-access-key: <<parameters.aws_secret_key_env>>
      - run:
          name: Install ebcli
          command: pip install --user --upgrade awsebcli
      - run:
          name: Setup AWS CLI profiles
          command: |-
            cat \<<-EOF > $HOME/.aws/config
            [profile default]
            output = json
            region = <<parameters.aws_default_region>>

            [profile supportsRoleArn]
            source_profile = default
            region = <<parameters.aws_default_region>>
            EOF

            if [ -n "${<<parameters.aws_role_arn_env>>}" ]; then
              echo "role_arn = ${<<parameters.aws_role_arn_env>>}" >> $HOME/.aws/config
            fi
      - run:
          name: Setup NewRelic config filters
          command: |-
            if [ -n "$NEW_RELIC_LICENSE_KEY" ]; then
            cat \<<-EOF > newrelic.ini
            [newrelic]
            license_key = $NEW_RELIC_LICENSE_KEY
            app_name = $PROJECT_NAME ($([ "$CIRCLE_BRANCH" = "develop" ] && echo "staging" || echo "production"))
            distributed_tracing.enabled = true
            monitor_mode = true
            log_level = info
            ssl = true
            high_security = false
            transaction_tracer.enabled = true
            transaction_tracer.transaction_threshold = apdex_f
            transaction_tracer.record_sql = obfuscated
            transaction_tracer.stack_trace_threshold = 0.5
            transaction_tracer.explain_enabled = true
            transaction_tracer.explain_threshold = 0.5
            transaction_tracer.function_trace =
            error_collector.enabled = true
            error_collector.ignore_errors =
            browser_monitoring.auto_instrument = true
            thread_profiler.enabled = true

            [newrelic:development]
            monitor_mode = false

            [newrelic:test]
            monitor_mode = false

            [newrelic:staging]
            app_name = Django Starter Demo (staging)
            monitor_mode = $([ "$CIRCLE_BRANCH" = "develop" ] && echo "true" || echo "false")

            [newrelic:production]
            app_name = Django Starter Demo (production)
            monitor_mode = $([ "$CIRCLE_BRANCH" = "main" ] && echo "true" || echo "false")
            EOF
            fi
      - run:
          name: Build the docker image
          command: |-
            docker build -t $PROJECT_NAME . -f ./Dockerfile.prod
            docker tag ${PROJECT_NAME}:latest <<parameters.aws_ecr_account_url>>/<<parameters.aws_ecr_repo_name>>:${CIRCLE_SHA1}
      - run:
          name: Push to ECR
          command: |-
            aws ecr get-login-password --region <<parameters.aws_default_region>> --profile supportsRoleArn | \
              docker login --username AWS --password-stdin <<parameters.aws_ecr_account_url>>
            docker push <<parameters.aws_ecr_account_url>>/<<parameters.aws_ecr_repo_name>>:${CIRCLE_SHA1}
      - run:
          name: Generate AWS Elastic Beanstalk config.yml
          command: |-
            mkdir -p .elasticbeanstalk
            cat \<<-EOF > .elasticbeanstalk/config.yml
            deploy:
              artifact: Dockerrun.aws.json
            global:
              application_name: <<parameters.eb_application_name>>
              default_platform: arn:aws:elasticbeanstalk:us-west-2::platform/Docker running on 64bit Amazon Linux/2.17.4
              default_region: <<parameters.aws_default_region>>
              include_git_submodules: true
              instance_profile: null
              platform_name: null
              platform_version: null
              profile: supportsRoleArn
              sc: git
              workspace_type: Application
            EOF
      - run:
          name: Generate Dockerrun.aws.json
          command: |-
            cat \<<-EOF > Dockerrun.aws.json
            {
              "AWSEBDockerrunVersion": "1",
              "Image": {
                "Name": "<<parameters.aws_ecr_account_url>>/<<parameters.aws_ecr_repo_name>>:${CIRCLE_SHA1}",
                "Update": "true"
              },
              "Ports": [
                {
                  "ContainerPort": "8000"
                }
              ]
            }
            EOF
      - run:
          # Sends the generated Dockerrun.aws.json to eb, this tells EB
          # to pull from the image we just built, and pushed to ECR and
          # deploy it.
          name: Deploying with EB CLI
          command: eb deploy <<parameters.eb_environment_name>> --profile supportsRoleArn

jobs:
  test-server:
    working_directory: ~/repo
    docker:
      - image: cimg/python:3.10
        environment:
          DATABASE_URL: postgres://postgres@localhost/circle_test
          DJANGO_SECRET_KEY: test

      - image: cimg/postgres:14.2

    steps:
      - checkout
      - run:
          name: Install Packages
          command: 'pip install -r requirements/test.txt'
      - run:
          name: Migrate Database
          command: 'DJANGO_SETTINGS_MODULE={{ cookiecutter.project_slug }}.settings.test ./manage.py migrate --noinput'
      - run:
          name: Run Tests
          command: 'pytest'

  deploy-staging:
    executor: aws-cli/default
    steps:
      - deploy:
          aws_ecr_account_url: $STAGING_AWS_ECR_ACCOUNT_URL
          aws_ecr_repo_name: $STAGING_AWS_ECR_REPO_NAME
          aws_default_region: $STAGING_AWS_DEFAULT_REGION
          aws_default_region_env: STAGING_AWS_DEFAULT_REGION
          aws_access_key_env: STAGING_AWS_ACCESS_KEY_ID
          aws_secret_key_env: STAGING_AWS_SECRET_ACCESS_KEY
          aws_role_arn_env: STAGING_AWS_ROLE_ARN
          eb_application_name: $STAGING_EB_APPLICATION_NAME
          eb_environment_name: $STAGING_EB_ENVIRONMENT_NAME
  deploy-production:
    executor: aws-cli/default
    steps:
      - deploy:
          aws_ecr_account_url: $PRODUCTION_AWS_ECR_ACCOUNT_URL
          aws_ecr_repo_name: $PRODUCTION_AWS_ECR_REPO_NAME
          aws_default_region: $PRODUCTION_AWS_DEFAULT_REGION
          aws_default_region_env: PRODUCTION_AWS_DEFAULT_REGION
          aws_access_key_env: PRODUCTION_AWS_ACCESS_KEY_ID
          aws_secret_key_env: PRODUCTION_AWS_SECRET_ACCESS_KEY
          aws_role_arn_env: PRODUCTION_AWS_ROLE_ARN
          eb_application_name: $PRODUCTION_EB_APPLICATION_NAME
          eb_environment_name: $PRODUCTION_EB_ENVIRONMENT_NAME

workflows:
  version: 2
  deploy:
    jobs:
      - test-server
      - deploy-staging:
          requires:
            - test-server
          filters:
            branches:
              only:
                - develop
      - deploy-production:
          requires:
            - test-server
          filters:
            branches:
              only:
                - main
